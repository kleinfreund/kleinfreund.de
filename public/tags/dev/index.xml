<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev on kleinfreund.de</title>
    <link>https://kleinfreund.de/tags/dev/index.xml</link>
    <description>Recent content in Dev on kleinfreund.de</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://kleinfreund.de/tags/dev/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting up my Development Environment on Ubuntu</title>
      <link>https://kleinfreund.de/setting-up-my-development-environment-on-ubuntu</link>
      <pubDate>Sat, 14 Oct 2017 12:30:00 +0000</pubDate>
      
      <guid>https://kleinfreund.de/setting-up-my-development-environment-on-ubuntu</guid>
      <description>

&lt;p&gt;I like setting up a new operating system. For the most part. All is still fresh. But some things need to be &lt;em&gt;exactly&lt;/em&gt; like they were before. For a while now I’ve been keeping a backup of my configuration files in a &lt;a href=&#34;https://github.com/kleinfreund/dotfiles&#34;&gt;dotfiles repository&lt;/a&gt;. This helps me getting up and running fairly quickly. However, that’s only half the trick.&lt;/p&gt;

&lt;p&gt;Setting up Ubuntu is tedious. It doesn’t do a good job of getting out of your way. Rather, it gets in your way. Changing some interface behavior or installing software is rarely obvious. What I found myself doing more than anything was hitting up a search engine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“How to install &lt;var&gt;$SOFTWARE&lt;/var&gt; on Ubuntu?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“How to stop Ubuntu from doing &lt;var&gt;$THING&lt;/var&gt;?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To help my future self, I created a text document in my home directory. In there, I wrote down what I did to answer these questions for myself. Following now is a loose collection of things I need to do when setting up a fresh Ubuntu installation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Software

&lt;ul&gt;
&lt;li&gt;Google Chrome&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Visual Studio Code&lt;/li&gt;
&lt;li&gt;Sublime Text&lt;/li&gt;
&lt;li&gt;Gnome Tweak Tool&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;General settings

&lt;ul&gt;
&lt;li&gt;Global file associations for text files&lt;/li&gt;
&lt;li&gt;Disable touchpad when mouse is connected&lt;/li&gt;
&lt;li&gt;Disable account locking when closing the laptops’ lid&lt;/li&gt;
&lt;li&gt;Disable tab/application switching on scroll &lt;strong&gt;(not possible)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Disable screenshot sound&lt;/li&gt;
&lt;li&gt;Disable dots covering the wallpaper in the login screen&lt;/li&gt;
&lt;li&gt;Disable mouse wheel click minimizing windows&lt;/li&gt;
&lt;li&gt;Disable global &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Up Arrow&lt;/kbd&gt;/&lt;kbd&gt;Down Arrow&lt;/kbd&gt; keybindings&lt;/li&gt;
&lt;li&gt;Show the date in the menu bar&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;software&#34;&gt;Software&lt;/h3&gt;

&lt;h4 id=&#34;google-chrome&#34;&gt;Google Chrome&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;wget -qO - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
echo &#39;deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main&#39; | sudo tee /etc/apt/sources.list.d/google-chrome.list
sudo apt update
sudo apt install google-chrome-stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Source: &lt;a href=&#34;https://askubuntu.com/a/510186&#34;&gt;Ask Ubuntu: How to install Google Chrome&lt;/a&gt;)&lt;/p&gt;

&lt;h4 id=&#34;git&#34;&gt;Git&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Source: &lt;a href=&#34;https://askubuntu.com/a/568596/337853&#34;&gt;Ask Ubuntu: How do I install the latest version of Git with apt?&lt;/a&gt;)&lt;/p&gt;

&lt;h4 id=&#34;visual-studio-code&#34;&gt;Visual Studio Code&lt;/h4&gt;

&lt;p&gt;Open &lt;a href=&#34;https://code.visualstudio.com/Download&#34;&gt;code.visualstudio.com/Download&lt;/a&gt; and download the &lt;code&gt;.deb&lt;/code&gt; file. Install it with &lt;code&gt;dpkg&lt;/code&gt; as shown below. You have to adjust the file name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo dpkg --install code_1.16.1-1505406497_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sublime-text&#34;&gt;Sublime Text&lt;/h4&gt;

&lt;p&gt;Follow &lt;a href=&#34;https://www.sublimetext.com/docs/3/linux_repositories.html&#34;&gt;the instructions on the Sublime Text website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to use a dev build but also get a potentially newer stable release, I added both channels like below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
echo &amp;quot;deb https://download.sublimetext.com/ apt/stable/&amp;quot; | sudo tee /etc/apt/sources.list.d/sublime-text.list
echo &amp;quot;deb https://download.sublimetext.com/ apt/dev/&amp;quot; | sudo tee /etc/apt/sources.list.d/sublime-text.list
sudo apt update
sudo apt install sublime-text
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;gnome-tweak-tool&#34;&gt;Gnome Tweak Tool&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install gnome-tweak-tool
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;general-settings&#34;&gt;General Settings&lt;/h3&gt;

&lt;h4 id=&#34;global-file-associations-for-text-files&#34;&gt;Global file associations for text files&lt;/h4&gt;

&lt;p&gt;Ubuntu uses gedit as its default text editor. To associate files that are opened in gedit with another program, one needs to adjust the file &lt;code&gt;/usr/share/applications/defaults.list&lt;/code&gt;. Replace all occurences of &lt;code&gt;gedit.desktop&lt;/code&gt; with the file name that is being associated with your preferred application. The new file name needs to refer to a file that exists in the same directory, e.g.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sublime_text.desktop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code.desktop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim.desktop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following command replaces all occurences of &lt;code&gt;gedit.desktop&lt;/code&gt; with &lt;code&gt;code.desktop&lt;/code&gt;, thus making Visual Studio Code the default text editor in most cases.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo sed -i &#39;s/gedit.desktop/code.desktop/g&#39; /usr/share/applications/defaults.list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this did not work for a a certain file, it might not be covered by the entries in &lt;code&gt;defaults.list&lt;/code&gt; or it might have been overriden previously. This happens when one changes the default application used for “Open With Other Application” from within the file explorer.&lt;/p&gt;

&lt;p&gt;Luckily, these overrides can be controlled with a command-line interface. The following examples re-associate regular text files with Visual Studio Code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prints the current setting&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xdg-mime query default text/plain
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Changes the association&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xdg-mime default code.desktop text/plain
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;disable-touchpad-when-mouse-is-connected&#34;&gt;Disable touchpad when mouse is connected&lt;/h4&gt;

&lt;p&gt;It puzzles me that this is not a setting available in System Settings. The following unfortunately is not very reliable. It also doesn’t communicate the touchpad state to System Settings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gsettings set org.gnome.desktop.peripherals.touchpad send-events disabled-on-external-mouse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right now, this doesn’t work for.&lt;/p&gt;

&lt;h4 id=&#34;disable-account-locking-when-closing-the-laptops-lid&#34;&gt;Disable account locking when closing the laptops’ lid&lt;/h4&gt;

&lt;p&gt;Again, why is this not easily configurable?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo sed -i &#39;s/IgnoreLid=false/IgnoreLid=true/g&#39; /etc/UPower/UPower.conf
service upower restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;disable-tab-application-switching-on-scroll-not-possible&#34;&gt;Disable tab/application switching on scroll &lt;strong&gt;(not possible)&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;This one is not even configurable at all. This feature is very annoying to me, as use my mouse wheel to open links in a new tab very often. That also makes me switch tabs in Chrome by accident all the time when a slight turn of the wheel occures.&lt;/p&gt;

&lt;p&gt;It’s not a good idea to use the mouse wheel turn for any kind of distinct interaction like switching a tab or navigating the browser history, as the metaphor is wrong. A wheel affords turning, adjusting values on a scale. In particular it’s well matched for smooth adjustments to a value (e.g. scrolling, zooming, controlling volume levels).&lt;/p&gt;

&lt;h4 id=&#34;disable-screenshot-sound&#34;&gt;Disable screenshot sound&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;sudo mv /usr/share/sounds/freedesktop/stereo/screen-capture.oga /usr/share/sounds/freedesktop/stereo/screen-capture-disabled.oga
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;disable-dots-covering-the-wallpaper-in-the-login-screen&#34;&gt;Disable dots covering the wallpaper in the login screen&lt;/h4&gt;

&lt;p&gt;If you think your wallpaper should have dots like these on it, edit the graphic, but don’t put them on top of my &lt;a href=&#34;http://blog.camposanto.com/post/138965082204/firewatch-launch-wallpaper-when-we-redid-the&#34;&gt;beautiful Firewatch wallpaper&lt;/a&gt;. Certainly nothing a system should do on my behalf.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo xhost +SI:localuser:lightdm
sudo su lightdm -s /bin/bash
gsettings set com.canonical.unity-greeter draw-grid false
exit
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;disable-mouse-wheel-click-minimizing-windows&#34;&gt;Disable mouse wheel click minimizing windows&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;gsettings set org.gnome.desktop.wm.preferences action-middle-click-titlebar &#39;none&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;disable-global-kbd-ctrl-kbd-kbd-alt-kbd-kbd-up-arrow-kbd-wbr-kbd-down-arrow-kbd-keybindings&#34;&gt;Disable global &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Up Arrow&lt;/kbd&gt;/&lt;wbr&gt;&lt;kbd&gt;Down Arrow&lt;/kbd&gt; keybindings&lt;/h4&gt;

&lt;p&gt;Sublime Text trained my muscle memory, so &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Up Arrow&lt;/kbd&gt;/&lt;wbr&gt;&lt;kbd&gt;Down Arrow&lt;/kbd&gt; are already reserved by me. Ubuntu, you shall obey.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-up &amp;quot;[&#39;&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-down &amp;quot;[&#39;&#39;]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;show-the-date-in-the-menu-bar&#34;&gt;Show the date in the menu bar&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;gsettings set com.canonical.indicator.datetime show-date true
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Uberspace With Multiple Domains</title>
      <link>https://kleinfreund.de/uberspace-with-multiple-domains</link>
      <pubDate>Fri, 15 Apr 2016 20:16:45 +0000</pubDate>
      
      <guid>https://kleinfreund.de/uberspace-with-multiple-domains</guid>
      <description>&lt;p&gt;A couple of months back I got myself a new hoster, &lt;a href=&#34;https://uberspace.de/&#34;&gt;Uberspace&lt;/a&gt;. I moved my sites to HTTPS, got rid of that subdomain (hey.kleinfreund.de) and setup a mail address. Here I explain the first part: Setting up multiple domains with Uberspace.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The following information are partially adapted from &lt;a href=&#34;https://wiki.uberspace.de/domain:verwalten&#34;&gt;Uberspace’s article about setting up domains on their service&lt;/a&gt; (in German only).&lt;/p&gt;

&lt;h3 id=&#34;what-you-need&#34;&gt;What You Need&lt;/h3&gt;

&lt;p&gt;One thing to get out of the way first: You’ll enter commands into a command line a lot. No need to worry though, everything is explained on the very detailed &lt;a href=&#34;https://wiki.uberspace.de/&#34;&gt;Uberspace wiki&lt;/a&gt;. Here are some things you’ll need in the process.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SSH client:&lt;/strong&gt; A simple program that does the job is &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&#34;&gt;PuTTY&lt;/a&gt;. I use &lt;a href=&#34;http://cmder.net/&#34;&gt;cmder&lt;/a&gt; as a replacement for Windows’ PowerShell which also works as an SSH client.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SFTP client:&lt;/strong&gt; To upload your files to the server. I use &lt;a href=&#34;https://winscp.net/eng/download.php&#34;&gt;WinSCP&lt;/a&gt; instead of FileZilla because it allows synchronizing directories.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming you’ve registered for an Uberspace, log into it via SSH. Using &lt;code&gt;ssh&lt;/code&gt; from the command line looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# &#39;phl&#39; should be your Uberspace username. This one is mine.
ssh phl@amnesia.uberspace.de
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connect to your Uberspace via your SFTP client as well. The server name would be &lt;code&gt;amnesia.uberspace.de&lt;/code&gt; at port 22 while the username is again your Uberspace username.&lt;/p&gt;

&lt;h3 id=&#34;choose-directory&#34;&gt;Choose Directory&lt;/h3&gt;

&lt;p&gt;Back to the SSH client. Go to &lt;code&gt;/var/www/virtual/phl&lt;/code&gt;. If you want to publish multiple websites on one Uberspace, this is the place where they go. If you wish to publish only one site, the contents could just reside in the &lt;code&gt;html&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Assume that we want to publish the websites &lt;a href=&#34;https://kleinfreund.de&#34;&gt;kleinfreund.de&lt;/a&gt; and &lt;a href=&#34;https://hyperlink.cool&#34;&gt;hyperlink.cool&lt;/a&gt;. For each website we need a separate directory. The directory’s name will be what the server is looking for as someone is trying to access your website.&lt;/p&gt;

&lt;p&gt;After the Domain Name System figured out the IP your domain points to, it’s the servers job to direct to the correct place. In our case, the Uberspace servers will look for the name &lt;code&gt;kleinfreund.de&lt;/code&gt; inside &lt;code&gt;/var/www/virtual/phl&lt;/code&gt; if someone entered this into their browser. Let’s make it so.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /var/www/virtual/phl
mkdir kleinfreund.de
mkdir hyperlink.cool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to setup subdomains (e.g. www.kleinfreund.de, hey.kleinfreund.de, etc.), do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ln -s kleinfreund.de hey.kleinfreund.de
ln -s kleinfreund.de www.kleinfreund.de
ln -s hyperlink.cool www.hyperlink.cool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The commands above create symbolic (&lt;code&gt;-s&lt;/code&gt;) links (&lt;code&gt;ln&lt;/code&gt;) to the directories we just created. This will result in requests to both &lt;code&gt;www.kleinfreund.de&lt;/code&gt; and &lt;code&gt;hey.kleinfreund.de&lt;/code&gt; being redirected to the respective directory (i.e. &lt;code&gt;kleinfreund.de&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now we also need to tell the Uberspace server that it should add some domains to the webserver configuration. Only with that information, the Uberspace server actually knows where exactly to search for the website (e.g. the &lt;code&gt;/phl&lt;/code&gt; part of &lt;code&gt;/var/www/virtual/phl&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uberspace-add-domain -d kleinfreund.de -w
uberspace-add-domain -d hey.kleinfreund.de -w
uberspace-add-domain -d www.kleinfreund.de -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After you entered the commands above, you’ll receive some output like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The webserver&#39;s configuration is adapted; it will get active within at most 5 minutes.
Now you can use the following records for your dns:
  A -&amp;gt; 12.34.56.78
  AAAA -&amp;gt; 2002:0:0:0:0:0:c22:384e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These information are important for your domain provider. Log into your accounts and find the place where you can change the “DNS” or “nameserver” settings for your domain. Add a new &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;AAAA&lt;/code&gt; record for each subdomain and also one for the main domain as shown in the table below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Host&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;TTL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;12.34.56.78&lt;/td&gt;
&lt;td&gt;3600&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;AAAA&lt;/td&gt;
&lt;td&gt;2002:0:0:0:0:0:c22:384e&lt;/td&gt;
&lt;td&gt;3600&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;www&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;12.34.56.78&lt;/td&gt;
&lt;td&gt;3600&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;www&lt;/td&gt;
&lt;td&gt;AAAA&lt;/td&gt;
&lt;td&gt;2002:0:0:0:0:0:c22:384e&lt;/td&gt;
&lt;td&gt;3600&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;hey&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;12.34.56.78&lt;/td&gt;
&lt;td&gt;3600&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;hey&lt;/td&gt;
&lt;td&gt;AAAA&lt;/td&gt;
&lt;td&gt;2002:0:0:0:0:0:c22:384e&lt;/td&gt;
&lt;td&gt;3600&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Do not attempt to use the above IP’s, use the ones from the output. You should also get rid of old &lt;code&gt;A&lt;/code&gt;/&lt;code&gt;AAAA&lt;/code&gt; records pointing to other IP’s (from your previous webhost).&lt;/p&gt;

&lt;p&gt;DNS changes often need a bit of time to propagate, so this is a good time to grab a hot cup of tea or coffee. You can test if the changes have been made with &lt;code&gt;dig&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dig kleinfreund.de AAAA +short
dig kleinfreund.de A +short
&lt;/code&gt;&lt;/pre&gt;

&lt;p class=&#34;note&#34;&gt;&lt;code&gt;dig&lt;/code&gt; is not shipped with Windows. You can get it by downloading one of the archives &lt;a href=&#34;ftp://ftp.nominum.com/pub/isc/bind9/9.9.8/&#34;&gt;from here&lt;/a&gt;. Extract only the &lt;code&gt;dig.exe&lt;/code&gt; file and drop it somewhere. I have it in &lt;code&gt;C:\dig\&lt;/code&gt;. Now add this directory to your path and restart your favorite command line.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That’s it for now. I think about also explaining how to setup HTTPS and the mail addresses. Would that be of interest for you? Let me know on &lt;a href=&#34;https://twitter.com/kleinfreund&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Backup configuration and dotfiles with Git and a shell script</title>
      <link>https://kleinfreund.de/backup-configuration-and-dotfiles-with-git-and-a-shell-script</link>
      <pubDate>Mon, 11 May 2015 13:12:45 +0000</pubDate>
      
      <guid>https://kleinfreund.de/backup-configuration-and-dotfiles-with-git-and-a-shell-script</guid>
      <description>

&lt;p&gt;A few months ago, the harddrive of my previous laptop died on me, but I could work on a Ubuntu partition I prepared for cases like this. Luckily, I kept a backup of all the important configuration files from things like Sublime Text in a &lt;a href=&#34;https://github.com/kleinfreund/dotfiles&#34;&gt;Git repository&lt;/a&gt;. At this point I wanted to improve the process of manually copying the files from the various locations to the repo directory. I wrote a little shell script for that purpose.&lt;/p&gt;

&lt;p&gt;Notice, that the script is adjusted to my personal needs and the software I use. It should work on your machine, but I haven’t tested it anywhere apart from my own environments.&lt;/p&gt;

&lt;h3 id=&#34;what-is-the-script-doing&#34;&gt;What is the script doing?&lt;/h3&gt;

&lt;p&gt;The script is meant to be executed from within the target repository containing the configuration files. Thus, it first checks if the directory is actually a Git repository and whether there is a .git directory indicating that we’re indeed at the root of the repo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [[ ! -d .git ]] || ! git rev-parse --git-dir &amp;gt; /dev/null 2&amp;gt;&amp;amp;1; then
  echo &amp;quot;Not a git repository.&amp;quot;
  exit 1
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I try to detect which operating system is in use. That’s because I keep the files from various OS’s separated. This might be unnecessary and even a hinderance, but for now I like to stay save here. The path snippet for the operating system is saved in the variable &lt;code&gt;OS&lt;/code&gt;. Another thing I do here is assigning the location of the Sublime Text configuration to a variable, since these are different from OS to OS. The other files (the dotfiles) usually sit in the home directory of the user.&lt;/p&gt;

&lt;p&gt;After that, I create directories for every tool within the repo. For example the Bash files for Ubuntu end up in &lt;code&gt;${REPO_PATH}linux/bash/&lt;/code&gt;. Finally, general copy commands for every file are issued. Since the files where Sublime Text stores its keybindings in are OS-dependant, I use the &lt;code&gt;OS&lt;/code&gt; variable I previously assigned to execute the right commands. That’s it, &lt;code&gt;echo &amp;quot;Completed.&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;possible-problems&#34;&gt;Possible problems&lt;/h3&gt;

&lt;p&gt;The script &lt;em&gt;assumes&lt;/em&gt; the locations of the configuration and dotfiles based on my experience. These might be different on other or future environments. I don’t know of a more reliable way for determining the correct paths, but that’s not too big of a deal breaker.&lt;/p&gt;

&lt;p&gt;Also I really could use some sort of map. Bash version 4 has associative arrays, but Git Bash is on version 3. I don’t know whether a future Git installer (which is &lt;em&gt;still&lt;/em&gt; sitting on 1.9.5 for Windows) might be using a newer version. Until then I keep associative arrays out of my script to keep it compatible with Windows environments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spring is coming</title>
      <link>https://kleinfreund.de/spring-is-coming</link>
      <pubDate>Tue, 24 Feb 2015 13:00:04 +0000</pubDate>
      
      <guid>https://kleinfreund.de/spring-is-coming</guid>
      <description>

&lt;p&gt;It’s time again. Not only is spring at the door but also a new year for the blog. The first entry was posted on 1st February 2014. Today is not the 1st February? You are completely right about that. Don’t worry about that. In the last couple of days I’ve been tightening and loosening some screws.&lt;/p&gt;

&lt;h3 id=&#34;subdomain-for-better-performance&#34;&gt;Subdomain for Better Performance&lt;/h3&gt;

&lt;p&gt;The most important change is the move to a subdomain. Look at it, it reads &lt;strong&gt;hey.kleinfreund.de&lt;/strong&gt; up there now. This has pragmatic reasons. If one points the root domain to the GitHub Pages IP via A Record it gets redirected. This is part of a DDoS mitigation strategy the girls and boys run over there (Anselm Hannemann &lt;a href=&#34;https://helloanselm.com/2014/github-pages-redirect-performance/&#34;&gt;wrote this down&lt;/a&gt; last year).&lt;/p&gt;

&lt;p&gt;The redirect took 3–5 seconds for me and that’s way too long. Heavy-heartedly I was about to setup the typical www. subdomain until it crossed my mind that one can choose freely. Anatol Broder chose &lt;a href=&#34;http://anatol.penibelst.de/&#34;&gt;anatol.penibelst.de&lt;/a&gt; for example.&lt;/p&gt;

&lt;h3 id=&#34;critical-css&#34;&gt;Critical CSS&lt;/h3&gt;

&lt;p&gt;Currently, I’m experimenting with inlining my full stylesheet. It’s 7.3 KB big. With that I cut out the extra HTTP request and don’t block rendering with an external stylesheet. In return, the ressource is not cachable anymore, because the stylesheet is now part of the HTML document.&lt;/p&gt;

&lt;p&gt;With this change, my build time went up by 6–7 seconds. That’s due to the &lt;code&gt;sassify&lt;/code&gt; and &lt;code&gt;scssify&lt;/code&gt; filters not utilizing the Sass cache. Locally, I can work around this with &lt;a href=&#34;https://talk.jekyllrb.com/t/is-capture-slow-or-are-my-build-times-normal/32/4&#34;&gt;a tip&lt;/a&gt; from envygeeks posted over at the new Jekyll forums.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if jekyll.environment == &#39;local&#39; %}
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/kleinfreund.css&amp;quot;&amp;gt;
{% else %}
  &amp;lt;style&amp;gt;
    {% capture scss_include %}
      {% include kleinfreund.scss %}
    {% endcapture %}

    {{ scss_include | scssify }}
  &amp;lt;/style&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;under-the-hood&#34;&gt;Under the Hood&lt;/h3&gt;

&lt;p&gt;Until now there were a couple of pages which basically were the same with the only difference being language-specific strings. That was me being lazy, not creating a layout and the needed strings in the locales.yml for that purpose. I cought up on this.&lt;/p&gt;

&lt;p&gt;In addition, I wrote an article about moving the website of my parents from Wordpress to Jekyll. However, it eventually got lost after the partition with Windows on it died. Right now I work on the remaining 50 GB which has Ubuntu on it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jekyll: Multilingual</title>
      <link>https://kleinfreund.de/jekyll-multilingual</link>
      <pubDate>Sat, 09 Aug 2014 06:50:37 +0000</pubDate>
      
      <guid>https://kleinfreund.de/jekyll-multilingual</guid>
      <description>

&lt;p&gt;One of the big ups of Jekyll is the luxutry of being able to work with GitHub Pages. Building a multilingual site is a bit harder, though. Using plugins is except for &lt;a href=&#34;https://help.github.com/articles/using-jekyll-plugins-with-github-pages&#34;&gt;a view exceptions&lt;/a&gt; not possible.&lt;/p&gt;

&lt;p&gt;My site is bilingual—German and English—whereas German is my main language. To do this I need an adjusted directory structure, categories and front matter defaults.&lt;/p&gt;

&lt;h3 id=&#34;directory-structure&#34;&gt;Directory Structure&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;.
├── _posts
|   └── 2014-08-09-jekyll-mehrsprachig.md
├── en
|   ├── _posts
|   |   └── 2014-08-09-jekyll-multilingual.md
|   ├── profile.md
|   └── index.html
├── profil.md
└── index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the main language, I use Jekyll as usual. The regular &lt;code&gt;_posts&lt;/code&gt;-directory for posts and pages in the project directory. Translations are housed in the corresponding subdirectory (e.g. &lt;code&gt;/en&lt;/code&gt; for English).&lt;/p&gt;

&lt;h3 id=&#34;permalinks&#34;&gt;Permalinks&lt;/h3&gt;

&lt;p&gt;Because titles can duplicate across languages, we need permalinks which distinct from one another. It’ll work without for titles like “Jekyll: Mehrsprachig” and “Jekyll: Multilingual”, but we get a conflict for “Soundtracks”.&lt;/p&gt;

&lt;p&gt;If we take a look &lt;a href=&#34;https://jekyllrb.com/docs/permalinks/#template-variables&#34;&gt;at the docs&lt;/a&gt; for permalinks, we don’t see too many possibilities. One could use the language slug in the title, but that’s silly and inconvenient.&lt;/p&gt;

&lt;p&gt;We use categories. That’s not too sound as well, but it works. Actually, we already created the category &lt;code&gt;en&lt;/code&gt; with out directory structure.&lt;/p&gt;

&lt;h4 id=&#34;config-yml&#34;&gt;_config.yml:&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;permalink: /:categories/:year/:month/:title
&lt;/code&gt;&lt;/pre&gt;

&lt;p class=&#34;block-note&#34;&gt;With the exception of &lt;code&gt;permalink: pretty&lt;/code&gt; these settings apply to posts only. Permalinks need to be explicitly set for pages.&lt;/p&gt;

&lt;h3 id=&#34;set-the-language&#34;&gt;Set the Language&lt;/h3&gt;

&lt;p&gt;To distinct between German and English documents, we don’t need to alienate categories again. We only needed that for the permalinks. For posts and pages we set the language with &lt;code&gt;lang: [de|en]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And with front matter defaults we don’t even need to do this for each document over and over. Nice!&lt;/p&gt;

&lt;h4 id=&#34;config-yml-1&#34;&gt;_config.yml:&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;defaults:
  # Default language
  -
    scope:
      path: &amp;quot;&amp;quot;
    values:
      lang: &amp;quot;de&amp;quot;
  # Language for everything inside `/en`
  -
    scope:
      path: &amp;quot;en&amp;quot;
    values:
      lang: &amp;quot;en&amp;quot;
  # Language for English posts
  -
    scope:
      path: &amp;quot;en/_posts&amp;quot;
      type: &amp;quot;posts&amp;quot; # As of version 2.3.0, Jekyll uses plural keywords for type
    values:
      lang: &amp;quot;en&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-blog-thing&#34;&gt;The Blog Thing&lt;/h3&gt;

&lt;p&gt;Creating a paginated blog with Jekyll is super easy. However this has its limitations. For example one isn’t able to filter the posts &lt;code&gt;paginator.posts&lt;/code&gt; is returning. That means I can’t just take all posts with &lt;code&gt;lang: en&lt;/code&gt; and make a blog with pagination.&lt;/p&gt;

&lt;p&gt;Because I&lt;/p&gt;

&lt;p&gt;Da ich kompromissfreudig bin, hab ich dieses Vorhaben gestrichen. Stattdessen nehm ich mir jetzt die ersten 10 Beiträge und verlinke dann auf’s Archiv.&lt;/p&gt;

&lt;h4 id=&#34;config-yml-2&#34;&gt;_config.yml:&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;max_posts: 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;index-html&#34;&gt;index.html:&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-liquid&#34;&gt;{% assign posts_de = site.posts | where: &amp;quot;lang&amp;quot;, &amp;quot;de&amp;quot; %}

{% for post in posts_de limit:site.max_posts %}
&amp;lt;!-- Beiträge 1–10 --&amp;gt;
{% endfor %}

{% if posts_de.size &amp;gt; site.max_posts %}
&amp;lt;!-- Archivlink, bei mehr als 10 Beiträgen --&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Das war’s im Grunde. Zum besseren Verständnis könnt ihr euch das &lt;a href=&#34;http://github.com/kleinfreund/kleinfreund.de&#34;&gt;GitHub Repository&lt;/a&gt; meiner Seite ansehen und durch die Dateien klicken.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Website: bbk-vogtland</title>
      <link>https://kleinfreund.de/website-bbk-vogtland</link>
      <pubDate>Sun, 02 Mar 2014 15:59:40 +0000</pubDate>
      
      <guid>https://kleinfreund.de/website-bbk-vogtland</guid>
      <description>&lt;p&gt;The local art society &lt;a href=&#34;http://bbk-vogtland.de&#34;&gt;Bund Bildender Künstler Vogtland e.V.&lt;/a&gt; got a redesign. The sites purpose is providing the necessary information about the society, its artists and upcoming exhibitions. Bye bye, HTML table layout.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kleinfreund.de/img/portfolio/bbk-vogtland-1.jpg&#34; alt=&#34;BBK Vogtland homepage&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kleinfreund.de/img/portfolio/bbk-vogtland-2.jpg&#34; alt=&#34;BBK Vogtland members page&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kleinfreund.de/img/portfolio/bbk-vogtland-3.jpg&#34; alt=&#34;BBK Vogtland detail view for members page&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Website: artrudloff</title>
      <link>https://kleinfreund.de/website-artrudloff</link>
      <pubDate>Tue, 25 Feb 2014 14:31:32 +0000</pubDate>
      
      <guid>https://kleinfreund.de/website-artrudloff</guid>
      <description>&lt;p&gt;I built &lt;a href=&#34;http://artrudloff.de&#34;&gt;artrudloff.de&lt;/a&gt; for my parents in 2012 to serve as a showcase for their work. Andreas is doing etchings, woodcuttings, aquarelles, poster artwork and drawings. Anke does very detailed drawings and paintings, wooden reliefs and other objects. Recently she’s also doing designs for bell adornments for churches.&lt;/p&gt;

&lt;p&gt;The site was running Wordpress originally, but I decided to rebuild it with Jekyll and host it on GitHub. This came with significant performance improvements. It also makes content updates easier for me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kleinfreund.de/img/portfolio/artrudloff-1.jpg&#34; alt=&#34;Website of Anke and Andreas Rudloff – Homepage&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kleinfreund.de/img/portfolio/artrudloff-2.jpg&#34; alt=&#34;Website of Andreas Rudloff&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kleinfreund.de/img/portfolio/artrudloff-3.jpg&#34; alt=&#34;Website of Anke Rudloff&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The name is kleinfreund</title>
      <link>https://kleinfreund.de/the-name-is-kleinfreund</link>
      <pubDate>Sat, 01 Feb 2014 19:36:27 +0000</pubDate>
      
      <guid>https://kleinfreund.de/the-name-is-kleinfreund</guid>
      <description>

&lt;p&gt;Yes, Hello! Something happened in the last weeks. My first real personal and self-built website. Here it starts.&lt;/p&gt;

&lt;p&gt;It all began with the final project in our web design class during my apprenticeship as a &lt;em&gt;Gestaltungstechnischer Assistent&lt;/em&gt; (loosely translated to design assistant). We were to build our own website, including a portfolio containing works from the past two years.&lt;/p&gt;

&lt;p&gt;That’s something I kept on cold storage for a long time now. Roughly outlined in my mind, I imagined a purely static and minimalistic site. On my way I took a rather big swing.&lt;/p&gt;

&lt;h3 id=&#34;while-we-re-at-it&#34;&gt;While we’re at it…&lt;/h3&gt;

&lt;p&gt;Why not have a look on the things the cool young kids use these days. Instead of using vanilla HTML and CSS, I ended up with a more powerful set of tools on my belt:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sass-lang.com&#34;&gt;SASS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://inuitcss.com&#34;&gt;inuitcss&lt;/a&gt; – CSS framework by Harry Roberts&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.github.com&#34;&gt;GitHub Pages&lt;/a&gt; – Hosting the source code&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt; – Generating a static blog page&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Now let’s see where this leads to. &lt;strong&gt;Cast off, the countdown has started, towards final frontiers.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>