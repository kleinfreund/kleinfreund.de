/**
 * Typography
 */
/**
 * Colors
 */
/**
 * Misc
 */
/**
 * inuitcss font-size mixin
 */
/**
 * inuitcss media-query mixin
 */
/**
 * Vertical Rhythm/Gaps
 */
/**
 * https://twitter.com/csswizardry/status/478938530342006784
 */
/*! normalize.css v3.0.1 | MIT License | git.io/normalize */
/**
 * 1. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  -ms-text-size-adjust: 100%;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 1 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"], input[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

/**
 * IE6 was right!
 */
*, *:before, *:after {
  -webkit-box-sizing: border-box;
  box-sizing: border-box; }

/**
 * Reset some basic elements
 */
h1, h2, h3, h4, h5, h6, p, blockquote, pre, dl, dd, ol, ul, hr, figure {
  margin: 0;
  padding: 0; }

/**
 * Set `margin-bottom` to maintain vertycal rhythm
 */
h1, h2, h3, h4, h5, h6, p, blockquote, pre, ul, ol, dl, figure, .island {
  margin-bottom: 30px;
  margin-bottom: 1.5rem; }

/**
 * Wrapper
 */
.wrapper {
  max-width: 680px;
  margin-right: auto;
  margin-left: auto;
  padding-right: 15px;
  padding-left: 15px; }
  @media only screen and (min-width: 481px) {
    .wrapper, %wrapper {
      padding-right: 30px;
      padding-left: 30px; } }

/**
 * Clearfix
 */
.island:after, .site-head:after, .site-nav:after {
  content: "";
  display: table;
  clear: both; }

/**
 * Hide/Show stuff
 */
.hidden {
  display: none; }

.visible {
  display: block; }

/**
 * Images
 */
img {
  /* Emphasis on `alt` text */
  font-style: italic;
  max-width: 100%; }

img, svg {
  vertical-align: middle; }

.img--right {
  float: right;
  margin-bottom: 30px;
  margin-left: 30px; }

.img--left {
  float: left;
  margin-right: 30px;
  margin-bottom: 30px; }

.img--center {
  display: block;
  margin-right: auto;
  margin-bottom: 30px;
  margin-left: auto; }

/**
 * Figures
 */
figure > img {
  display: block; }

figcaption {
  font-size: 16px;
  font-size: 0.8rem;
  line-height: 1.875; }
  figcaption > a {
    font-weight: 300; }

/**
 * Rulers
 */
hr {
  border: 0;
  border-bottom: 2px solid #aaa;
  margin-top: -1px;
  margin-bottom: 29px;
  margin-bottom: 1.45rem; }

html {
  font: 300 1.25em/1.5 Ubuntu, sans-serif;
  color: #444;
  background-color: #fff;
  overflow-y: scroll;
  min-height: 100%; }

/**
 * Headings
 */
h1, h2, h3, h4, h5, h6 {
  color: #5e85d6;
  font-weight: 300; }

h1 {
  font-size: 36px;
  font-size: 1.8rem;
  line-height: 1.66667; }

h2 {
  font-size: 32px;
  font-size: 1.6rem;
  line-height: 1.875; }

h3 {
  font-size: 28px;
  font-size: 1.4rem;
  line-height: 1.07143; }

h4 {
  font-size: 24px;
  font-size: 1.2rem;
  line-height: 1.25; }

h5 {
  font-size: 20px;
  font-size: 1rem;
  line-height: 1.5; }

h6 {
  font-size: 16px;
  font-size: 0.8rem;
  line-height: 1.875; }

/**
 * Lists
 */
li > ul, li > ol {
  margin-bottom: 0; }

dt {
  font-weight: 500; }

/**
 * Quotations
 */
blockquote {
  border-left: 4px solid #5e85d6;
  margin-left: -15px;
  padding-left: 11px;
  font-style: italic; }
  blockquote > :last-child {
    margin-bottom: 0; }

.source {
  font-style: normal; }

/**
 * Inline elements
 */
strong {
  font-weight: 500; }

q {
  font-style: italic; }

/**
 * Links
 */
a {
  color: #5e85d6;
  font-weight: 300;
  text-decoration: none; }
  a:hover, a:focus, a:active {
    color: #1f3e7c; }

/**
 * Code
 */
pre, code, kbd, samp {
  font-family: Consolas, Courier New, Courier, monospace; }

code {
  white-space: nowrap; }

pre {
  overflow: auto;
  white-space: pre;
  word-wrap: normal;
  color: #fff;
  background-color: #444;
  padding: 7.5px 15px;
  border-radius: 3px; }
  pre > code {
    font-size: 16px;
    font-size: 0.8rem;
    line-height: 1.875;
    color: #fff;
    white-space: pre; }

.pagination {
  margin-left: 0;
  list-style: none;
  text-align: center; }
  .pagination > li {
    padding: 15px;
    display: inline-block; }

.island {
  display: block;
  padding: 15px;
  color: #fff;
  background-color: #5e85d6;
  text-align: center;
  font-weight: 500; }
  .island:hover, .island:focus, .island:active {
    color: #fff;
    background-color: #1f3e7c; }
  .island > :last-child {
    margin-bottom: 0; }

/*------------------------------------*\
    $FUNCTIONAL LAYER
\*------------------------------------*/
/**
 * 1. Always hide actual `input` element
 */
#toggle-nav {
  display: none;
  /* [1] */ }

/**
 * 1. Avoid selection while rapidly toggling the navigation
 * 2. Change cursor to pointer to indicate action
 * 3. Hide toggle trigger on big screens
 */
[for="toggle-nav"] {
  -webkit-user-select: none;
  /* [1] */
  -moz-user-select: none;
  /* [1] */
  -ms-user-select: none;
  /* [1] */
  user-select: none;
  /* [1] */
  cursor: pointer;
  /* [2] */ }
  @media only screen and (min-width: 1024px) {
    [for="toggle-nav"] {
      display: none;
      /* [3] */ } }

/**
 * 1. Hide navigation
 * 2. Show navigation when input is checked
 * 3. Show navigation on big screens
 */
.site-nav {
  display: none;
  /* [1] */ }
  #toggle-nav:checked ~ .site-nav {
    display: block;
    /* [2] */ }
  @media only screen and (min-width: 1024px) {
    .site-nav {
      display: block;
      /* [3] */ } }

/*------------------------------------*\
    $VISUAL LAYER
\*------------------------------------*/
.toggle-nav__label {
  position: absolute;
  top: 30px;
  right: 30px; }

.nav-icon {
  display: block;
  width: 30px;
  height: 30px; }
  .nav-icon__bar {
    fill: #5e85d6;
    -webkit-transform: translate(0) rotate(0);
    -ms-transform: translate(0) rotate(0);
        transform: translate(0) rotate(0);
    -webkit-transition: -webkit-transform 0.2s;
    transition: transform 0.2s; }

.toggle-nav__input:checked ~ .toggle-nav__label .nav-icon__bar--top {
  -webkit-transform: translate(6px, 2px) rotate(45deg);
  -ms-transform: translate(6px, 2px) rotate(45deg);
      transform: translate(6px, 2px) rotate(45deg); }
.toggle-nav__input:checked ~ .toggle-nav__label .nav-icon__bar--mid {
  display: none; }
.toggle-nav__input:checked ~ .toggle-nav__label .nav-icon__bar--bot {
  -webkit-transform: translate(-15px, 6px) rotate(-45deg);
  -ms-transform: translate(-15px, 6px) rotate(-45deg);
      transform: translate(-15px, 6px) rotate(-45deg); }

.page-content {
  margin-top: 120px;
  margin-top: 6rem;
  margin-bottom: 120px;
  margin-bottom: 6rem; }
  .page-content ul, .page-content ol {
    list-style-position: outside; }

.post-list {
  list-style: none;
  margin-bottom: 120px;
  margin-bottom: 6rem; }
  .post-list > li {
    margin-bottom: 120px;
    margin-bottom: 6rem; }
    .post-list > li > :last-child {
      margin-bottom: 0; }

.meta-list {
  list-style: none;
  margin-bottom: 0;
  margin-left: 0; }
  .meta-list > li {
    display: inline-block;
    font-size: 16px;
    font-size: 0.8rem;
    line-height: 1.875; }
    .meta-list > li + li:before {
      /* content: space middot space */
      content: "\0020 \00B7 \0020"; }

.archive-list .current-post a {
  color: #aaa; }

.block-note {
  position: relative;
  display: block;
  font-size: 16px;
  font-size: 0.8rem;
  line-height: 1.875; }
  .block-note:before {
    /* content: "/!\ "; */
    content: "\2F \21 \5C \A0";
    position: absolute;
    right: 100%;
    color: #5e85d6;
    font-family: Consolas, Courier New, Courier, monospace;
    font-weight: bold; }

.site-head {
  border-top: 8px solid #5e85d6;
  margin-bottom: 120px;
  margin-bottom: 6rem; }

.site-title {
  display: none; }
  @media only screen and (min-width: 1024px) {
    .site-title {
      color: #444;
      line-height: 64px;
      margin-bottom: 0;
      margin-left: 15px;
      float: left;
      display: block; }
      .site-title > span {
        font-weight: 500; } }

.site-logo {
  position: relative;
  display: block;
  float: left;
  margin-top: 15px;
  margin-left: 30px; }
  .site-logo > svg {
    width: 64px;
    height: 64px;
    float: left;
    -webkit-transition: -webkit-transform 0.2s;
    transition: transform 0.2s; }
  .site-logo:hover > svg {
    -webkit-transform: translateY(-30px);
    -ms-transform: translateY(-30px);
        transform: translateY(-30px);
    -webkit-transition: -webkit-transform 0.2s 0.3s;
    transition: transform 0.2s 0.3s; }

.site-logo__icon {
  fill: #5e85d6; }

@media only screen and (min-width: 481px) {
  .site-logo {
    margin-left: 90px; } }

.site-nav {
  position: absolute;
  top: 60px;
  right: 30px;
  text-align: right; }
  @media only screen and (min-width: 1024px) {
    .site-nav {
      position: static;
      float: right;
      line-height: 1;
      margin-right: 90px;
      margin-top: 30px; } }

.site-nav__item {
  display: block;
  padding-top: 10px;
  font-weight: 500; }
  @media only screen and (min-width: 1024px) {
    .site-nav__item {
      float: left;
      padding: 15px 30px; }
      .site-nav__item + .site-nav__item {
        margin-left: 15px; } }

.site-foot {
  background-color: #444;
  padding: 15px 30px;
  font-size: 14px;
  font-size: 0.7rem;
  line-height: 2.14286; }
  .site-foot, .site-foot a {
    color: #fff; }
  .site-foot a {
    text-decoration: underline; }
  .site-foot p:last-of-type {
    margin-bottom: 0; }
/*# sourceMappingURL=data:application/json;base64, */